<?xml version="1.0" encoding="utf-8"?>
<language>
	<pattern regex="\b(struct|class|namespace|using|inline|virtual|static)\b" style="keyword.c++"/>	
	<pattern regex="\b(return|if|while|typedef|continue|break|else|for|sizeof|typeid|volatile)\b" style="keyword.c++"/>
	<pattern regex="\b(true|false|const|enum|union|mutable|throw|catch|try|new|delete)\b" style="keyword.c++"/>
	<pattern regex="\b(public|protected|private|template|typename|do|switch|case|default)\b" style="keyword.c++"/>
	<pattern regex="\b(extern|auto|explicit|goto|operator|(static|dynamic|const|reinterpret)_cast)\b" style="keyword.c++"/>	
	
	<pattern regex="\b(__\w+)\b" style="keyword.directive.c++"/>
	
	<pattern regex="\b(unsigned|signed|int|short|long|float|double|bool|void|char|wchar_t)\b" style="keyword.type.c++"/>
	
	<pattern name="line_comment" regex="//.*$" style="comment.c++"/>
	<contextPattern name="block_comment" style="comment.c++">
		<begin><pattern regex="/\*" style="comment.c++"/></begin>
		<end><pattern regex="\*/" style="comment.c++"/></end>
	</contextPattern>
	
	<capturePattern regex="(#include)\s+(&lt;[^&gt;]*&gt;)" group0="string.c++"
		group1="keyword.c++" 
		group2="string.c++"/>
		
	<capturePattern regex="(#include)\s+(&quot;[^&gt;]*&quot;)" group0="string.c++"
		group1="keyword.c++" 
		group2="string.c++"/>
		
	<pattern regex="^#(ifn?def|else|endif|if|pragma|define)\b" style="keyword.c++"/>
		
	<contextPattern style="string.c++">
		<begin>
			<pattern regex="&quot;" style="string.c++"/>
		</begin>
		<end>
			<pattern regex="(?&lt;!\\)(\\\\)*&quot;" style="string.c++"/>
		</end>
	</contextPattern>
	
	<contextPattern style="string.char.c++">
		<begin>
			<pattern regex="'" style="string.char.c++"/>
		</begin>
		<end>
			<pattern regex="(?&lt;!\\)(\\\\)*'" style="string.char.c++"/>
		</end>
	</contextPattern>
</language>
