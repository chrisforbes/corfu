-- simple subset of C

-- things to note: while we have a formatting *convention*, 
-- the tabs etc are not mandatory.
-- also, blank lines can be included or omitted anywhere without changing the semantics.
-- however, *breaking* lines does affect the semantics, so don't do that.
-- if you need to split a line, there are other "good" ways to do that.

in [source.c++]
	/\b(int|float|double|long|short|char|wchar_t|void)\b/ -> [keyword.type]
	/\b(unsigned|signed)\b/ -> [keyword.type]
	/\b(virtual|static|const|volatile|auto|register|restrict|mutable|extern|inline)\b/ -> [keyword.modifier]
	/\b(if|while|for|do|switch|goto|continue|break|return|case|using|namespace)\b/ -> [keyword]
	/\b(struct|class|template|union|enum|typedef)\b/ -> [keyword]
	
	/\b(public|private|protected)\b/ -> [keyword.visibility]
	
	/^\s*#(define|elif|else|endif|error|if|ifdef|ifndef)\b/ -> [keyword.preprocessor]
	/^\s*#(import|include|line|pragma|undef|using)\b/ -> [keyword.preprocessor]
	
	/\/\/.*$/ -> [comment.single-line]
	/\/\*/ -> [comment.multi-line]
		enter: [comment.multi-line]				-- can omit scope name here, to use the scope name above
		
in [source.c++ comment.multi-line]
	/\*\// -> []
		leave: after			-- leave: accepts `after` or `before`; this is just
								-- choosing when to pop the scope. this method is really
								-- intended for a closing fragment that needs to be
								-- styled differently
	
in [source.c++]
	-- note that we can open up a scope ANYWHERE and add more stuff to it
	/"/ -> [string]
		enter: [string]
		
in [source.c++ string]			-- note we can use descendant selectors, like in CSS
	/((?<!\\)(\\\\)*"|.$)/ -> []		-- this is the other way: use [] to avoid adding a scope,
		leave: after			-- and pop the scope after the end of the match
